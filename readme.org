#+TITLE: Controlling Evaluation in Haskell
#+AUTHOR: Moritz Drexl <mdrexl@fastmail.fm>
#+DATE: Nov 21st, 2019

* Motivation

- Key to understanding space and time behavior of Haskell programs
  - Identify and fix space leaks
  - Improve performance
- Want to avoid placing bangs hit or miss

* Lazyness and Evaluation

** What is Lazyness?

- Lazy evaluation delays evaluation of an expression until the value is needed
- Repeated evaluation is avoided through sharing

** What is a Thunk?

- Conceptually, it's a value that only becomes available after some expression
  has been evaluated
- Sits on the Haskell heap
- Presence of thunks can be visualized in GHCI with =:sprint=

#+BEGIN_SRC haskell
  >>> let x = True
  >>> :sprint x
  x = True
  >>> let y = 1 + 1
  >>> :sprint y
  y = _
#+END_SRC

** Model of Lazy Evaluation in Haskell

*** Initial set of thunks is the top-level definitions

#+BEGIN_SRC haskell
  true :: Bool
  true = True

  not :: Bool -> Bool
  not b = case b of
    True  -> False
    False -> True
#+END_SRC

*** Function application creates a thunk

#+BEGIN_SRC haskell
  x :: Bool
  x = not true
#+END_SRC

- Often, space leaks exist because a function is applied iteratively before
  something is evaluated

*** Evaluation destroys a thunk (but may create others)

**** IO evaluates

- Without IO there's no evaluation
- Only IO actions initiate evaluation, and in sequence

#+BEGIN_SRC haskell
  main :: IO ()
  main = do
    let x = not True  -- x points to a new thunk
    _ <- evaluate x   -- now x is evaluated to False
    print x           -- printing would have evaluated x anyway but does not again
#+END_SRC

**** What happens when evaluating

- We always evaluate a symbol/thunk to *Weak Head Normal Form (WHNF)*
- When is an expression in WHNF? => Look at outermost part of an expression
  - If it's a data constructor or a lambda => yes
  - if it's function application           => no

#+BEGIN_SRC haskell
  Left (not True) -- yes
  \b -> not b     -- yes
  not True        -- no
#+END_SRC

*Steps:*

1. When you evaluate a thunk, you run the "script" to evaluate the expression
   (function body) within it
2. The script may
   - Create new thunks (function application), or
   - Evaluate other thunks (pattern matching, =seq=)
3. Evaluation goes on until you have a value in WHNF

*Example:*

#+BEGIN_SRC haskell
  _ <- evaluate (not true)
#+END_SRC

* Controlling Evaluation

** Pattern matching evaluates

- Creates a chain reaction of evaluations
  - "If you want to evaluate the =not true= thunk, you first need to evaluate =true="
- Tuning the strictness of Haskell programs just revolves around this reasoning

** =seq=

- seq is just like a generic pattern match that's not optimized away
- =seq x y= means "if you want to evaluate y, you also need to evaluate x"

#+BEGIN_SRC haskell
  f :: Int -> Maybe Int
  f i =
    case i of
      1 -> Just 1
      _ -> Just i

  g :: Int -> Maybe Int
  g i = seq i (Just i)
#+END_SRC

** BangPatterns

- Bang patterns are just syntactic sugar for =seq=
- The pattern evaluates the thunk before it binds the variable

#+BEGIN_SRC haskell
  h :: Int -> Maybe Int
  h !i = Just i
#+END_SRC

** Strict fields

- Also "syntactic sugar" for =seq=
- Evaluates a thunk before putting it into the data type

#+BEGIN_SRC haskell
  data SMaybe a =
      SJust !a
    | SNothing

  s :: Int -> SMaybe Int
  s i = SJust i
#+END_SRC

** =deepseq= / =force=

- Big hammer, makes sure that everything is evaluated to normal form
- "Recursively call =seq= on every field of the data type"
- Has cost of traversing a data structure even if it's aleady fully evaluated

* Examples

** =trace=

- =trace= can be used to debug evaluation
- Let's use it to illustrate sharing

#+BEGIN_SRC haskell
  data Pair = Pair Int Int

  wrap :: Int -> Pair
  wrap i =
    let
      x = trace "computing x" (i + 1)
    in
      Pair x x
#+END_SRC

** Spine Strict List

- Spine strict: If you evaluate the list, the list as well as all its elements
  are evaluated
- Running methods on it always leaves the list in a spine forced state

#+BEGIN_SRC haskell
  data Spine a = Spine [a]

  smap :: (a -> b) -> Spine a -> Spine b
  smap f (Spine xs) = Spine (loop xs)
    where
      loop []     = []
      loop (x:xs) = f x : loop xs

  -- >>> let !x = smap not (Spine [True, False])
  -- >>> :sprint x
  -- x = Spine _
#+END_SRC

** The Case of foldl'

#+BEGIN_SRC haskell
  foldl :: (b -> a -> b) -> b -> [a] -> b
  foldl f z []     = z
  foldl f z (x:xs) =
    let
      z' = z `f` x
    in
      foldl f z' xs
#+END_SRC

#+BEGIN_SRC haskell
  mean :: [Double] -> Double
  mean xs = undefined
#+END_SRC

* Resources

- [[http://blog.ezyang.com/2011/04/the-haskell-heap/][The Haskell Heap]] by Edward Z. Yang (!)
- [[https://github.com/themoritz/haskell-evaluation][Talk on Github]]
